# File: .github/workflows/cd-e2e-and-deploy.yml
# M·ª§C ƒê√çCH: Ch·∫°y c√°c b√†i test E2E n·∫∑ng v√† ƒë·∫©y image l√™n Docker Hub.
# Workflow n√†y CH·ªà ƒë∆∞·ª£c k√≠ch ho·∫°t KHI workflow "CI - Unit Tests & Build Images" ch·∫°y xong v√† TH√ÄNH C√îNG.

name: CD - E2E Test & Deploy to Docker Hub

on:
  workflow_run:
    workflows: ["CI - Unit Tests & Build Images (Cached)"]
    types:
      - completed
    branches: [ main ]

jobs:
  # -------------------------------------------------------------
  # GIAI ƒêO·∫†N 1: CH·∫†Y E2E TESTS
  # -------------------------------------------------------------
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Th√™m timeout ƒë·ªÉ tr√°nh treo v√¥ th·ªùi h·∫°n
    
    # Ch·ªâ ch·∫°y KHI workflow tr∆∞·ªõc th√†nh c√¥ng
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout the specific commit that passed Unit Tests
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # T·∫°o file .env v·ªõi t·∫•t c·∫£ secrets v√† configs c·∫ßn thi·∫øt
      - name: Create .env file for E2E tests
        run: |
          cat << EOF > .env.e2e
          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          
          # MongoDB URIs
          MONGODB_AUTH_URI=mongodb://mongodb:27017/auth
          MONGODB_PRODUCT_URI=mongodb://mongodb:27017/product
          MONGODB_ORDER_URI=mongodb://mongodb:27017/order
          
          # RabbitMQ
          RABBITMQ_URI=amqp://admin:admin@rabbitmq:5672
          RABBITMQ_QUEUE_PRODUCT=products
          RABBITMQ_QUEUE_ORDER=orders
          
          # Service URLs
          AUTH_SERVICE_URL=http://auth-service:3000
          PRODUCT_SERVICE_URL=http://product-service:3001
          ORDER_SERVICE_URL=http://order-service:3002
          
          # Ports
          PORT_AUTH=3000
          PORT_PRODUCT=3001
          PORT_ORDER=3002
          PORT_GATEWAY=3003
          
          # API Gateway
          API_GATEWAY_URL=http://api-gateway:3003
          EOF
          
          echo "‚úÖ Environment file created"

      # Generate version tags
      - name: Generate image tags
        id: meta
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "version_tag=${{ github.ref_name }}-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "date_tag=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      # Build images C·ª§C B·ªò v·ªõi CACHE t·ª´ job tr∆∞·ªõc (KH√îNG PUSH)
      # Cache t·ª´ job "test-and-build" s·∫Ω ƒë∆∞·ª£c t√°i s·ª≠ d·ª•ng ‚Üí Build SI√äU NHANH
      - name: Build auth-service from cache
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          load: true  # Load v√†o Docker daemon thay v√¨ push
          tags: |
            auth-service:${{ steps.meta.outputs.sha_tag }}
            auth-service:test
          cache-from: type=gha,scope=auth  # T·∫£i cache t·ª´ job tr∆∞·ªõc
          cache-to: type=gha,mode=max,scope=auth

      - name: Build product-service from cache
        uses: docker/build-push-action@v5
        with:
          context: ./product
          load: true
          tags: |
            product-service:${{ steps.meta.outputs.sha_tag }}
            product-service:test
          cache-from: type=gha,scope=product  # T·∫£i cache t·ª´ job tr∆∞·ªõc
          cache-to: type=gha,mode=max,scope=product

      - name: Build order-service from cache
        uses: docker/build-push-action@v5
        with:
          context: ./order
          load: true
          tags: |
            order-service:${{ steps.meta.outputs.sha_tag }}
            order-service:test
          cache-from: type=gha,scope=order  # T·∫£i cache t·ª´ job tr∆∞·ªõc
          cache-to: type=gha,mode=max,scope=order

      - name: Build api-gateway from cache
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          load: true
          tags: |
            api-gateway:${{ steps.meta.outputs.sha_tag }}
            api-gateway:test
          cache-from: type=gha,scope=gateway  # T·∫£i cache t·ª´ job tr∆∞·ªõc
          cache-to: type=gha,mode=max,scope=gateway

      - name: Build e2e-test locally
        uses: docker/build-push-action@v5
        with:
          context: ./e2e-test
          load: true
          tags: e2e-tester:test

      # C·∫≠p nh·∫≠t docker-compose ƒë·ªÉ s·ª≠ d·ª•ng local images
      - name: Update docker-compose to use local images
        run: |
          # Thay th·∫ø build directive b·∫±ng image local
          sed -i 's|build: ./auth|image: auth-service:test|g' docker-compose.e2e.yml
          sed -i 's|build: ./product|image: product-service:test|g' docker-compose.e2e.yml
          sed -i 's|build: ./order|image: order-service:test|g' docker-compose.e2e.yml
          sed -i 's|build: ./api-gateway|image: api-gateway:test|g' docker-compose.e2e.yml
          sed -i 's|build: ./e2e-test|image: e2e-tester:test|g' docker-compose.e2e.yml
          
          # Inject JWT_SECRET t·ª´ secrets v√†o docker-compose
          sed -i 's|JWT_SECRET=your_jwt_secret_key_here|JWT_SECRET=${{ secrets.JWT_SECRET }}|g' docker-compose.e2e.yml
          
          echo "‚úÖ Docker Compose updated to use local test images"
          echo "üìã Verifying configuration..."
          grep "image:" docker-compose.e2e.yml

      # Ch·∫°y E2E tests v·ªõi local images
      - name: Run E2E tests
        id: e2e
        continue-on-error: true
        run: |
          echo "üß™ Starting E2E tests with local images..."
          docker compose -f docker-compose.e2e.yml up \
            --abort-on-container-exit \
            --exit-code-from e2e-tester

      # Capture logs n·∫øu fail
      - name: Capture service logs on failure
        if: failure() && steps.e2e.outcome == 'failure'
        run: |
          echo "=== Auth Service Logs ===" > e2e-logs.txt
          docker logs auth-service >> e2e-logs.txt 2>&1 || true
          echo -e "\n=== Product Service Logs ===" >> e2e-logs.txt
          docker logs product-service >> e2e-logs.txt 2>&1 || true
          echo -e "\n=== Order Service Logs ===" >> e2e-logs.txt
          docker logs order-service >> e2e-logs.txt 2>&1 || true
          echo -e "\n=== API Gateway Logs ===" >> e2e-logs.txt
          docker logs api-gateway >> e2e-logs.txt 2>&1 || true
          echo -e "\n=== E2E Tester Logs ===" >> e2e-logs.txt
          docker logs e2e-tester >> e2e-logs.txt 2>&1 || true

      - name: Upload logs as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-failure-logs
          path: e2e-logs.txt
          retention-days: 7

      # CH·ªà KHI E2E TESTS PASS ‚Üí Save images ƒë·ªÉ push
      - name: Save Docker images as artifacts
        if: success() && steps.e2e.outcome == 'success'
        run: |
          echo "üíæ Saving tested images as artifacts..."
          mkdir -p /tmp/docker-images
          
          docker save auth-service:${{ steps.meta.outputs.sha_tag }} | gzip > /tmp/docker-images/auth-service.tar.gz
          docker save product-service:${{ steps.meta.outputs.sha_tag }} | gzip > /tmp/docker-images/product-service.tar.gz
          docker save order-service:${{ steps.meta.outputs.sha_tag }} | gzip > /tmp/docker-images/order-service.tar.gz
          docker save api-gateway:${{ steps.meta.outputs.sha_tag }} | gzip > /tmp/docker-images/api-gateway.tar.gz
          
          echo "‚úÖ Images saved successfully"
          ls -lh /tmp/docker-images/

      - name: Upload Docker images as artifacts
        if: success() && steps.e2e.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tested-docker-images
          path: /tmp/docker-images/*.tar.gz
          retention-days: 1
          compression-level: 0  # Already compressed with gzip

      # L∆ØU METADATA TR∆Ø·ªöC KHI UPLOAD
      - name: Save image tags metadata
        if: success() && steps.e2e.outcome == 'success'
        run: |
          mkdir -p /tmp/metadata
          cat << EOF > /tmp/metadata/image-tags.txt
          SHA_TAG=${{ steps.meta.outputs.sha_tag }}
          DATE_TAG=${{ steps.meta.outputs.date_tag }}
          COMMIT_SHA=${{ github.sha }}
          BRANCH=${{ github.ref_name }}
          ACTOR=${{ github.actor }}
          EOF
          echo "‚úÖ Metadata file created:"
          cat /tmp/metadata/image-tags.txt

      - name: Upload image metadata
        if: success() && steps.e2e.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: image-metadata
          path: /tmp/metadata/image-tags.txt
          retention-days: 1

      - name: Clean up E2E environment
        if: always()
        run: |
          docker compose -f docker-compose.e2e.yml down -v
          rm -f .env.e2e

      # Fail job n·∫øu E2E tests failed
      - name: Fail job if E2E tests failed
        if: steps.e2e.outcome == 'failure'
        run: |
          echo "‚ùå E2E tests failed - images will NOT be pushed to Docker Hub"
          exit 1

  # -------------------------------------------------------------
  # GIAI ƒêO·∫†N 2: PUSH L√äN DOCKER HUB (CH·ªà KHI E2E PASS)
  # -------------------------------------------------------------
  push-to-hub:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: e2e-tests  # Ch·ªâ ch·∫°y khi e2e-tests SUCCESS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # Download tested images t·ª´ job tr∆∞·ªõc
      - name: Download tested Docker images
        uses: actions/download-artifact@v4
        with:
          name: tested-docker-images
          path: /tmp/docker-images

      - name: Download image metadata
        uses: actions/download-artifact@v4
        with:
          name: image-metadata
          path: /tmp

      - name: Load image metadata
        id: meta
        run: |
          source /tmp/image-tags.txt
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
          echo "üìã Image metadata loaded:"
          cat /tmp/image-tags.txt

      # Load images v√†o Docker daemon
      - name: Load tested images into Docker
        run: |
          echo "üì¶ Loading tested images from artifacts..."
          docker load -i /tmp/docker-images/auth-service.tar.gz
          docker load -i /tmp/docker-images/product-service.tar.gz
          docker load -i /tmp/doc ker-images/order-service.tar.gz
          docker load -i /tmp/docker-images/api-gateway.tar.gz
          
          echo "‚úÖ Images loaded successfully"
          docker images | grep -E "(auth-service|product-service|order-service|api-gateway)"
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Tag v√† push images v·ªõi multiple tags
      - name: Tag and push auth-service
        run: |
          docker tag auth-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
          docker tag auth-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.sha_tag }}
          docker tag auth-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.date_tag }}
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.sha_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.date_tag }}

      - name: Tag and push product-service
        run: |
          docker tag product-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest
          docker tag product-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.sha_tag }}
          docker tag product-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.date_tag }}
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.sha_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.date_tag }}

      - name: Tag and push order-service
        run: |
          docker tag order-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
          docker tag order-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.sha_tag }}
          docker tag order-service:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.date_tag }}
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.sha_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.date_tag }}

      - name: Tag and push api-gateway
        run: |
          docker tag api-gateway:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
          docker tag api-gateway:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.sha_tag }}
          docker tag api-gateway:${{ steps.meta.outputs.sha_tag }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.date_tag }}
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.sha_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.date_tag }}

      # T·∫°o release summary
      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Published Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üè∑Ô∏è Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` - Production ready" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.meta.outputs.sha_tag }}\` - Tested commit" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.meta.outputs.date_tag }}\` - Build date" >> $GITHUB_STEP_SUMMARY

