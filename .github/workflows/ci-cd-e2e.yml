# CI/CD with E2E - Unit Tests → Build → E2E → Push Latest
name: CI/CD with E2E Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # =====================================================
  # JOB 1: Unit Tests (Parallel)
  # =====================================================
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        service: [auth, product]
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Cache node_modules directly
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.service }}/node_modules
          key: node-modules-${{ runner.os }}-${{ matrix.service }}-${{ hashFiles(format('{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ matrix.service }}-
      
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefix ${{ matrix.service }}

      # Cache MongoMemoryServer binaries
      - name: Cache MongoMemoryServer binaries
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/mongodb-binaries
          key: mongodb-binary-${{ runner.os }}-7.0.14
          restore-keys: |
            mongodb-binary-${{ runner.os }}-

      - name: Run unit tests
        run: npm test --prefix ${{ matrix.service }}
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: test
          MONGOMS_DOWNLOAD_DIR: /home/runner/.cache/mongodb-binaries
          MONGOMS_VERSION: 7.0.14

  # =====================================================
  # JOB 2: Build & Push :test Tag (Parallel)
  # =====================================================
  build-and-push-test:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        include:
          - service: auth
            context: ./auth
            image: auth-service
          - service: product
            context: ./product
            image: product-service
          - service: order
            context: ./order
            image: order-service
          - service: api-gateway
            context: ./api-gateway
            image: api-gateway
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push with :test tag for E2E testing
      - name: Build and push ${{ matrix.service }}:test
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:test
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  # =====================================================
  # JOB 3: E2E Tests with Docker Compose
  # =====================================================
  e2e-tests:
    needs: [build-and-push-test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Cache E2E node_modules
      - name: Cache E2E node_modules
        id: cache-e2e-modules
        uses: actions/cache@v4
        with:
          path: e2e-test/node_modules
          key: node-modules-${{ runner.os }}-e2e-${{ hashFiles('e2e-test/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-e2e-

      - name: Install E2E dependencies
        if: steps.cache-e2e-modules.outputs.cache-hit != 'true'
        run: npm ci --prefix e2e-test

      # Pull images parallel (faster than docker-compose up)
      - name: Pull Docker images
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:test &
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/product-service:test &
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/order-service:test &
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:test &
          docker pull mongo:6.0 &
          docker pull rabbitmq:3.11-management &
          wait

      # Start services with pre-built :test images
      - name: Start E2E environment
        run: docker compose -f docker-compose.e2e.ci.yml up -d
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      # Wait for all services healthy
      - name: Wait for services
        run: |
          timeout 90 bash -c '
            while true; do
              health_status=$(docker compose -f docker-compose.e2e.ci.yml ps --format json | jq -r ".[] | select(.Service==\"api-gateway\") | .Health")
              if [ "$health_status" = "healthy" ]; then
                echo "✅ API Gateway is healthy!"
                break
              fi
              echo "⏳ Waiting for api-gateway... (current: $health_status)"
              sleep 3
            done
          '
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      # Run E2E tests (lite version for speed)
      - name: Run E2E tests
        run: |
          cd e2e-test
          npm run test:lite
        env:
          API_GATEWAY_URL: http://localhost:3003

      # Cleanup
      - name: Cleanup E2E environment
        if: always()
        run: |
          docker-compose -f docker-compose.e2e.ci.yml logs
          docker-compose -f docker-compose.e2e.ci.yml down -v
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

  # =====================================================
  # JOB 4: Re-tag :test → :latest (Only if E2E Pass)
  # =====================================================
  retag-latest:
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        image: [auth-service, product-service, order-service, api-gateway]
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Pull :test tag
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:test
      
      - name: Tag as :latest
        run: |
          docker tag \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:test \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:latest
      
      - name: Push :latest tag
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image }}:latest