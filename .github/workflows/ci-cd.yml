# Simple CI/CD - No E2E, Direct Push after Unit Tests
name: Simple CI/CD - Build & Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job để chạy test cho service "auth"
  test-auth:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn từ repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache, giúp tăng tốc việc cài đặt dependencies
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: auth/package-lock.json

      # Step 3: Cài đặt dependencies cho service "auth"
      # `npm ci` sẽ sử dụng cache nếu có, giúp tiết kiệm thời gian
      - name: Install auth dependencies
        run: npm install --prefix auth

      # Step 4: Tạo file .env cho môi trường test của service "auth"
      # Tối ưu: Sử dụng MongoDB in-memory, không cần URI thật
      - name: Create .env file for auth
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "NODE_ENV=test" >> auth/.env
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" >> auth/.env

      # Step 5: Chạy test cho service "auth"
      # Giả định rằng bạn đã cài đặt "mongodb-memory-server" làm devDependency
      - name: Run tests for auth
        run: npm test --prefix auth

  # Job để chạy test cho service "product"
  test-product:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: product/package-lock.json

      # Step 3: Cài đặt dependencies cho service "product"
      - name: Install product dependencies
        run: npm install --prefix product

      # Step 4: Tạo file .env cho môi trường test của service "product"
      # Tối ưu: Không cần thông tin về auth service thật hay RabbitMQ thật
      - name: Create .env file for product
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "NODE_ENV=test" >> product/.env
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      # Step 5: Chạy test cho service "product"
      # Tối ưu: Không khởi động auth service thật, thay vào đó là mock JWT token trong test
      - name: Run tests for product
        run: npm test --prefix product
  # Job để build và push Docker images nếu cả 2 job test trên đều thành công
  build-and-push:
    needs: [test-auth, test-product]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      # 1. Checkout code (BẮT BUỘC để build)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Docker Buildx (BẮT BUỘC cho GitHub Actions cache)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Generate tags
      - name: Generate tags
        id: meta
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "date_tag=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      # 5. Build and Push images (parallel với cache)
      - name: Build and push auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.sha_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:${{ steps.meta.outputs.date_tag }}
          cache-from: type=gha,scope=auth
          cache-to: type=gha,mode=max,scope=auth

      - name: Build and push product-service
        uses: docker/build-push-action@v5
        with:
          context: ./product
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.sha_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ steps.meta.outputs.date_tag }}
          cache-from: type=gha,scope=product
          cache-to: type=gha,mode=max,scope=product

      - name: Build and push order-service
        uses: docker/build-push-action@v5
        with:
          context: ./order
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.sha_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/order-service:${{ steps.meta.outputs.date_tag }}
          cache-from: type=gha,scope=order
          cache-to: type=gha,mode=max,scope=order

      - name: Build and push api-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.sha_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ steps.meta.outputs.date_tag }}
          cache-from: type=gha,scope=gateway
          cache-to: type=gha,mode=max,scope=gateway

      # 6. Summary
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`, \`${{ steps.meta.outputs.sha_tag }}\`, \`${{ steps.meta.outputs.date_tag }}\`" >> $GITHUB_STEP_SUMMARY
