# Tên của workflow
name: CI - Unit & Integration Tests

# Các sự kiện kích hoạt workflow
on: [push, pull_request]

jobs:
  # Job để chạy test cho service "auth"
  test-auth:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn từ repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache, giúp tăng tốc việc cài đặt dependencies
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: auth/package-lock.json

      # Step 3: Cài đặt dependencies cho service "auth"
      # `npm ci` sẽ sử dụng cache nếu có, giúp tiết kiệm thời gian
      - name: Install auth dependencies
        run: npm ci --prefix auth

      # Step 4: Tạo file .env cho môi trường test của service "auth"
      # Tối ưu: Sử dụng MongoDB in-memory, không cần URI thật
      - name: Create .env file for auth
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "NODE_ENV=test" >> auth/.env
          # MONGODB_AUTH_URI sẽ được ghi đè bởi mongodb-memory-server trong code test

      # Step 5: Chạy test cho service "auth"
      # Giả định rằng bạn đã cài đặt "mongodb-memory-server" làm devDependency
      - name: Run tests for auth
        run: npm test --prefix auth

  # Job để chạy test cho service "product"
  test-product:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout mã nguồn
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cài đặt Node.js và bật caching cho node_modules
      # Tối ưu: Tương đương với Docker layer cache
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hoặc phiên bản Node.js bạn đang dùng
          cache: 'npm'
          cache-dependency-path: product/package-lock.json

      # Step 3: Cài đặt dependencies cho service "product"
      - name: Install product dependencies
        run: npm ci --prefix product

      # Step 4: Tạo file .env cho môi trường test của service "product"
      # Tối ưu: Không cần thông tin về auth service thật hay RabbitMQ thật
      - name: Create .env file for product
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "NODE_ENV=test" >> product/.env
          # MONGODB_PRODUCT_URI sẽ được ghi đè bởi mongodb-memory-server
          # RABBITMQ_URI sẽ được mock trong môi trường test

      # Step 5: Chạy test cho service "product"
      # Tối ưu: Không khởi động auth service thật, thay vào đó là mock JWT token trong test
      - name: Run tests for product
        run: npm test --prefix product