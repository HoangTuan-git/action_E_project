version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_DATABASE: eproject
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 5s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 5s

  # Auth Service (use pre-built :test image)
  auth-service:
    image: ${DOCKERHUB_USERNAME}/auth-service:test
    container_name: auth-service
    environment:
      - PORT=3000
      - JWT_SECRET=your_jwt_secret_key_here
      - MONGODB_AUTH_URI=mongodb://mongodb:27017/auth
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode ? 0 : 1))\""]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 8s

  # Product Service (use pre-built :test image)
  product-service:
    image: ${DOCKERHUB_USERNAME}/product-service:test
    container_name: product-service
    environment:
      - PORT=3001
      - JWT_SECRET=your_jwt_secret_key_here
      - MONGODB_PRODUCT_URI=mongodb://mongodb:27017/product
      - RABBITMQ_URI=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_PRODUCT=products
      - RABBITMQ_QUEUE_ORDER=orders
      - ORDER_SERVICE_URL=http://order-service:3002
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001', (r) => process.exit(r.statusCode ? 0 : 1))\""]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 10s

  # Order Service (use pre-built :test image)
  order-service:
    image: ${DOCKERHUB_USERNAME}/order-service:test
    container_name: order-service
    environment:
      - PORT=3002
      - JWT_SECRET=your_jwt_secret_key_here
      - MONGODB_ORDER_URI=mongodb://mongodb:27017/order
      - RABBITMQ_URI=amqp://admin:admin@rabbitmq:5672
      - RABBITMQ_QUEUE_ORDER=orders
      - RABBITMQ_QUEUE_PRODUCT=products
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3002', (r) => process.exit(r.statusCode ? 0 : 1))\""]
      interval: 3s
      timeout: 2s
      retries: 3
      start_period: 10s

  # API Gateway (use pre-built :test image)
  api-gateway:
    image: ${DOCKERHUB_USERNAME}/api-gateway:test
    container_name: api-gateway
    environment:
      - PORT=3003
      - AUTH_SERVICE_URL=http://auth-service:3000
      - PRODUCT_SERVICE_URL=http://product-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
    ports:
      - "3003:3003"
    depends_on:
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3003/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))\""]
      interval: 3s
      timeout: 2s
      retries: 5
      start_period: 12s

  # E2E Tester Service
  e2e-tester:
    build: ./e2e-test
    container_name: e2e-tester
    environment:
      - API_GATEWAY_URL=http://api-gateway:3003
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - eproject-network
    command: ["npm", "run", "test:lite"]

networks:
  eproject-network:
    driver: bridge
